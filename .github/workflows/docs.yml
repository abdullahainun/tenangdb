name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - '**.md'
      - 'docs/**'
      - '**.yaml'
      - '**.yml'
      - 'config.yaml.example'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.md'
      - 'docs/**'
      - '**.yaml'
      - '**.yml'
      - 'config.yaml.example'
      - 'docker-compose.yml'

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate README.md
      run: |
        echo "üîç Validating README.md..."
        
        # Check if README.md exists
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md not found"
          exit 1
        fi
        
        # Check if README.md contains required sections
        required_sections=("Quick Start" "Config" "Features" "Commands")
        for section in "${required_sections[@]}"; do
          if ! grep -q "## .*$section" README.md; then
            echo "‚ùå Missing section: $section"
            exit 1
          fi
        done
        
        echo "‚úÖ README.md validation passed"
    
    - name: Validate YAML files
      run: |
        echo "üîç Validating YAML files..."
        
        # Function to check YAML syntax without strict style rules
        check_yaml_syntax() {
          local file="$1"
          echo "Checking $file..."
          
          # Use Python to check basic YAML syntax
          python3 -c "
        import yaml
        import sys
        
        try:
            with open('$file', 'r') as f:
                yaml.safe_load(f)
            print('‚úÖ $file: Valid YAML syntax')
        except yaml.YAMLError as e:
            print('‚ùå $file: Invalid YAML syntax')
            print(f'Error: {e}')
            sys.exit(1)
        except Exception as e:
            print('‚ùå $file: Error reading file')
            print(f'Error: {e}')
            sys.exit(1)
          "
        }
        
        # Check config.yaml.example
        if [ -f "config.yaml.example" ]; then
          check_yaml_syntax "config.yaml.example"
        fi
        
        # Check docker-compose.yml
        if [ -f "docker-compose.yml" ]; then
          check_yaml_syntax "docker-compose.yml"
        fi
        
        # Check other YAML files
        find . -name "*.yml" -o -name "*.yaml" | grep -v .github | while read file; do
          if [ -f "$file" ]; then
            check_yaml_syntax "$file"
          fi
        done
        
        echo "‚úÖ All YAML files have valid syntax"
    
    - name: Check documentation links
      run: |
        echo "üîç Checking documentation links..."
        
        # Check if referenced documentation files exist
        docs_files=("INSTALL.md" "DOCKER.md" "MYSQL_USER_SETUP.md" "PRODUCTION_DEPLOYMENT.md")
        for doc in "${docs_files[@]}"; do
          if grep -q "$doc" README.md; then
            if [ ! -f "$doc" ]; then
              echo "‚ö†Ô∏è  Referenced but missing: $doc"
            else
              echo "‚úÖ Found: $doc"
            fi
          fi
        done
        
        echo "‚úÖ Documentation links check completed"
    
    - name: Validate Docker Compose
      if: hashFiles('docker-compose.yml') != ''
      run: |
        echo "üîç Validating Docker Compose..."
        
        # Validate docker-compose.yml syntax
        docker-compose config > /dev/null
        echo "‚úÖ Docker Compose syntax is valid"
        
        # Check if required services are defined
        if ! docker-compose config | grep -q "tenangdb"; then
          echo "‚ö†Ô∏è  No tenangdb service found in docker-compose.yml"
        else
          echo "‚úÖ tenangdb service found"
        fi
        
        echo "‚úÖ Docker Compose validation completed"

  status-check:
    name: Documentation Status Check
    runs-on: ubuntu-latest
    needs: [validate-docs]
    if: always()
    steps:
    - name: Check validation results
      run: |
        if [ "${{ needs.validate-docs.result }}" != "success" ]; then
          echo "‚ùå Documentation validation failed: ${{ needs.validate-docs.result }}"
          exit 1
        fi
        echo "‚úÖ All documentation checks passed!"