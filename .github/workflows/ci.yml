name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    name: Test Go ${{ matrix.go-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, macos-13, macos-latest]
        go-version: ['1.23', '1.24']
        include:
          # Test additional Go versions on Ubuntu LTS
          - os: ubuntu-22.04
            go-version: '1.22'
          - os: ubuntu-latest
            go-version: '1.22'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Get dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build
      run: CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -v -o tenangdb ./cmd

  build-matrix:
    name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    needs: test-matrix
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64]
        include:
          # Add ARM64 for Linux and macOS only
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
    
    - name: Get build info
      id: build_info
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ "$VERSION" == "refs/heads/"* ]]; then
          VERSION=${GITHUB_REF#refs/heads/}
        fi
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ steps.build_info.outputs.version }}
        BUILD_TIME=${{ steps.build_info.outputs.build_time }}
        LDFLAGS="-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}"
        
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="tenangdb-${GOOS}-${GOARCH}.exe"
        else
          BINARY_NAME="tenangdb-${GOOS}-${GOARCH}"
        fi
        
        echo "Building $BINARY_NAME"
        go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -ldflags "${LDFLAGS}" -o "$BINARY_NAME" ./cmd
    
    - name: Test binary
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      run: |
        BINARY_NAME="tenangdb-${{ matrix.goos }}-${{ matrix.goarch }}"
        chmod +x "$BINARY_NAME"
        ./"$BINARY_NAME" version
    
    - name: Upload build artifacts
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: tenangdb-${{ matrix.goos }}-${{ matrix.goarch }}
        path: tenangdb-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 30
        if-no-files-found: error


  security-and-lint:
    name: Security & Lint
    runs-on: ubuntu-latest
    needs: test-matrix
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
    
    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m
    
    - name: Run security checks
      run: |
        echo "üîç Running security checks..."
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key" --include="*.go" . > /dev/null 2>&1; then
          echo "‚ö†Ô∏è  Found potential hardcoded secrets"
          grep -r "password\|secret\|key" --include="*.go" . | head -3
        else
          echo "‚úÖ No hardcoded secrets found"
        fi
        
        # Run vulnerability check
        echo "üîç Running vulnerability scan..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
        echo "‚úÖ Security checks completed"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-matrix, build-matrix]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
    
    - name: Build TenangDB
      run: make build
    
    - name: Test basic functionality
      run: |
        echo "üß™ Testing basic functionality..."
        
        # Test version command
        ./tenangdb version
        
        # Test help command
        ./tenangdb --help
        
        # Test backup command help
        ./tenangdb backup --help
        
        # Test invalid config handling
        if ./tenangdb backup --config non-existent-config.yaml --dry-run 2>/dev/null; then
          echo "‚ùå Should fail with non-existent config"
          exit 1
        else
          echo "‚úÖ Properly handles non-existent config"
        fi
        
        echo "‚úÖ Integration tests completed successfully"

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-matrix, build-matrix]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test-matrix, build-matrix, security-and-lint, integration-test, docker-build]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [ "${{ needs.test-matrix.result }}" != "success" ]; then
          echo "test-matrix failed: ${{ needs.test-matrix.result }}"
          exit 1
        fi
        if [ "${{ needs.build-matrix.result }}" != "success" ]; then
          echo "build-matrix failed: ${{ needs.build-matrix.result }}"
          exit 1
        fi
        if [ "${{ needs.security-and-lint.result }}" != "success" ]; then
          echo "security-and-lint failed: ${{ needs.security-and-lint.result }}"
          exit 1
        fi
        if [ "${{ needs.integration-test.result }}" != "success" ]; then
          echo "integration-test failed: ${{ needs.integration-test.result }}"
          exit 1
        fi
        if [ "${{ needs.docker-build.result }}" != "success" ] && [ "${{ needs.docker-build.result }}" != "skipped" ]; then
          echo "docker-build failed: ${{ needs.docker-build.result }}"
          exit 1
        fi
        echo "All CI checks passed successfully!"