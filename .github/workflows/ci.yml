name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    name: Test Go ${{ matrix.go-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, macos-13, macos-latest]
        go-version: ['1.23', '1.24']
        include:
          # Test additional Go versions on Ubuntu LTS
          - os: ubuntu-22.04
            go-version: '1.22'
          - os: ubuntu-latest
            go-version: '1.22'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Get dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Build
      run: go build -v -o tenangdb ./cmd

  build-matrix:
    name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    needs: test-matrix
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64]
        include:
          # Add ARM64 for Linux and macOS only
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
    
    - name: Get build info
      id: build_info
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ "$VERSION" == "refs/heads/"* ]]; then
          VERSION=${GITHUB_REF#refs/heads/}
        fi
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ steps.build_info.outputs.version }}
        BUILD_TIME=${{ steps.build_info.outputs.build_time }}
        LDFLAGS="-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}"
        
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="tenangdb-${GOOS}-${GOARCH}.exe"
        else
          BINARY_NAME="tenangdb-${GOOS}-${GOARCH}"
        fi
        
        echo "Building $BINARY_NAME"
        go build -ldflags "${LDFLAGS}" -o "$BINARY_NAME" ./cmd
    
    - name: Test binary
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      run: |
        BINARY_NAME="tenangdb-${{ matrix.goos }}-${{ matrix.goarch }}"
        chmod +x "$BINARY_NAME"
        ./"$BINARY_NAME" version
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tenangdb-${{ matrix.goos }}-${{ matrix.goarch }}
        path: tenangdb-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 7
        if-no-files-found: error


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-matrix
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run basic security checks
      run: |
        echo "Running basic security checks..."
        # Check for common security issues
        grep -r "password\|secret\|key" --include="*.go" . || echo "No hardcoded secrets found"
        echo "âœ… Basic security checks completed"
    
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-matrix, build-matrix]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client mydumper
    
    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h127.0.0.1 -uroot -ptestpass; do
          echo "Waiting for MySQL..."
          sleep 2
        done
    
    - name: Setup test database
      run: |
        mysql -h127.0.0.1 -uroot -ptestpass -e "CREATE DATABASE IF NOT EXISTS testdb;"
        mysql -h127.0.0.1 -uroot -ptestpass testdb -e "CREATE TABLE test_table (id INT PRIMARY KEY, name VARCHAR(50));"
        mysql -h127.0.0.1 -uroot -ptestpass testdb -e "INSERT INTO test_table VALUES (1, 'test');"
    
    - name: Build TenangDB
      run: make build
    
    - name: Create test config
      run: |
        mkdir -p configs
        cat > configs/test-config.yaml << 'EOF'
database:
  host: "127.0.0.1"
  port: 3306
  user: "root"
  password: "testpass"
backup:
  directory: "./test-backups"
  databases:
    - "testdb"
  skip_confirmation: true
logging:
  level: "info"
upload:
  enabled: false
EOF
    
    - name: Run integration test
      run: |
        mkdir -p test-backups
        
        # Debug: check if config file exists and show content
        echo "=== Checking config file ==="
        ls -la configs/
        echo "=== Config file content ==="
        cat configs/test-config.yaml
        
        # Debug: check binary
        echo "=== Binary info ==="
        ls -la tenangdb
        ./tenangdb --help
        
        # Run the actual test
        echo "=== Running integration test ==="
        ./tenangdb backup --config configs/test-config.yaml --dry-run
        echo "Integration test completed successfully"

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test-matrix, build-matrix, security-scan, lint, integration-test]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [ "${{ needs.test-matrix.result }}" != "success" ]; then
          echo "test-matrix failed: ${{ needs.test-matrix.result }}"
          exit 1
        fi
        if [ "${{ needs.build-matrix.result }}" != "success" ]; then
          echo "build-matrix failed: ${{ needs.build-matrix.result }}"
          exit 1
        fi
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "security-scan failed: ${{ needs.security-scan.result }}"
          exit 1
        fi
        if [ "${{ needs.lint.result }}" != "success" ]; then
          echo "lint failed: ${{ needs.lint.result }}"
          exit 1
        fi
        if [ "${{ needs.integration-test.result }}" != "success" ]; then
          echo "integration-test failed: ${{ needs.integration-test.result }}"
          exit 1
        fi
        echo "All CI checks passed successfully!"